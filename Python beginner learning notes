# By Illusekr/Ar1sa
# Version 1.0.0 Updated at 8/23/2022 14:46


# #Chp 5 输出函数print
# #将数据输出到文件中
# fp=open('D:/text.txt','a+')
# print('hello world',file=fp)
# fp.close()

# #Chp 6 转义字符
# print('老师说：\'大家好。\'')

# #Chp 7 二进制与字符编码
# print(chr(0b100111001011000))#将各种进制数字转换成字符码（0b表示二进制）
# print(ord('乘'))#将字符码转换为十进制数

# #Chp 8 python中的标识符与保留字
# import keyword
# print(keyword.kwlist)
# #标识符不能以数字开头，不能是保留字

# #Chp 9 变量的定义和使用
# name='玛利亚'
# print(name)
# #变量由标识（内存地址）类型（数据类型）和值构成
# #使用id()获取内存地址，使用type()获取数据类型
# print('标识',id(name))
# print('类型',type(name))
# print('值',name)

#Chp 10 多次赋值
#再次赋值之后变量名会指向新的空间
# name1='maria'
# print(name1)
# name1='saksa'
# print(name1)

#Chp 11 变量类型
#int 整数类型
#float 浮点类型
#bool 布尔类型
#str 字符串类型

# Chp 12 整数类型
# print('十进制',118)
# print('二进制',0b10101111)
# print('八进制',0o176)
# print('十六进制',0x1eaf)

#Chp 13 浮点类型
# a=3.14159
# print(a,type(a))
# #浮点数计算导出位数可能不精确
# n1=1.1
# n2=2.2
# n3=2.1
# print(n1+n2)
# print(n1+n3)
# #解决方法，导入Decimal模块
# from decimal import Decimal
# print(Decimal('1.1')+Decimal('2.2'))

# # Chp 14 布尔类型
# f1=True
# f2=False
# print(f1,type(f1))
# print(f2,type(f2))

# Chp 15 字符串类型
#单引号和双引号定义的字符串必须在一行，三引号定义的可以分布在连续的多行
# str1='人生苦短，我用Python'
# print(str1,type(str1))
# str2="人生苦短，我用Python"
# str3="""人生苦短，
# 我用Python"""
# str4='''人生苦短，
# 我用Python'''
# print(str3,str4)

# Chp 16 数据类型转换
# name='张三'
# age=20
# print(type(name),type(age))
# print('我叫'+name+'今年'+str(age)+'岁')#str强制类型转换成字符串
# #int()转换整形，float()转换浮点
#只有整数字符串能转换为整形，小数串不行
#只有整数串能转成浮点类型，转换后会加上.0

# Chp 18 注释
#单行注释以#号开头，直到换行结束
# 一对三引号之间的代码称为多行注释
# 编码声明注释(在文件开头)
# #coding:gbk
# 将默认编码改为ANSI(包含gbk)

# Chp 19 输入函数
#输入值的类型为str
# present=input('大圣想要什么礼物呢？')
# print(present,type(present))

# Chp 20
# a=input('请输入一个加数')
# b=input('请输入另一个加数')
# print(int(a)+int(b))

# Chp 21 算数运算符
# print(1+1)#加减乘除运算
# print(1-1)
# print(1*2)
# print(1/2)
# print(11//2)#整除运算
# print(11%2)#取模运算
# print(2**3)#幂运算
# #一正一负的整除与取模运算
# print(9//-4)
# print(-9//4)#本质取整运算是把小数向下取整，故-2.2取-3
# print(9%-4)#本质是被除数-除数*商
# print(-9%4)

# Chp 22 赋值运算符
# 从右至左运行
#支持链式赋值 a=b=c=20 此时a,b,c的值，类型，地址都一致
#支持参数赋值 += -+ *= /= 等等 a+=30相当于a加上30在赋值给a
# 支持系列解包赋值 a,b,c=20,30,40 将20赋值给a，30赋给b，40赋给c
# 交换变量的值
# a,b=10,20
# print(a,b)
# a,b=b,a
# print(a,b)

# Chp 23 比较运算符
# # 结果为布尔值
# a,b=10,20
# print(a>b)
# print(a<b)
# print(a==b)
# print(a!=b)
#==比较的是两个对象的值
# 比较两个对象的标识的是is
# a=10
# b=10
# print(a==b)
# print(a is b)
# lst1=[11,22,33,44]
# lst2=[11,22,33,44]
# print(lst1==lst2)
# print(lst1 is lst2)#两个相同值的列表地址不同
# print(a is not b)#比较地址不等

# Chp 24 布尔运算符
# a,b=1,2
# print(a==1 and b==2)#同真则真，一假则假(与运算）
# print(a!=1 or b==2 )#一真则真，同假则假（或运算）
# f1=True
# f2=False
# print(not f1)
# print(not f2)#对布尔类型的状态取反
# s='hello world'
# print('w' in s)
# print('w' not in s)#查询一个元素在不在某对象中

# Chp 25 位运算符
# 按位与& 对应全为1才为1，否则为0
# 按位或| 对应全为0才为0，否则为1
# 左移位运算符<< 高位溢出舍弃，低位补0
# 右移位运算符>> 低位溢出舍弃，高位补0
# print(4&8) #00001000按位与00001000 与完全为0
# print(4|8)
# print(4<<1)
# print(4>>1)#二进制左移x位就是乘以2的x次方(不考虑溢出），右移则是除(也不考虑溢出）

# Chp 26 运算符的优先级
# 幂运算>乘除>加减>左移右移>按位与按位或>比较运算>布尔运算>赋值运算
# 有括号先算括号

# Chp 27 程序的组织结构
# 程序从上到下顺序执行代码，中间没有任何跳转和结束
# print('------------程序开始------------')
# print('1.把冰箱门打开')
# print('2.把大象放进冰箱里')
# print('3.把冰箱门关上')
# print('------------程序结束------------')

# Chp 28 对象的布尔值
# 使用内置函数bool()获取对象的布尔值
# 空对象，0，False，None的布尔值为False，其余都为True

# Chp 29 选择结构 单分支结构
# money=1000
# s=int(input('请输入取款金额'))
# if money>=s:
#     money=money-s
#     print('取款成功，余额为',money)

# Chp 30 选择结构 双分支结构
# num=int(input('请输入一个整数'))
# if num%2==0:
#     print('是偶数')
# else:
#     print('是奇数')

# Chp 31 选择结构 多分支结构
# 程序略
# 语法结构
# if:pass
#   pass
# elif:pass
#   pass
# elif:pass
#   pass
# else:
#     pass

# Chp 32 分支结构 嵌套if的使用
# 程序略
# 语法结构略

# Chp 33 条件表达式
# 语法结构
# x if exp1 else exp2

# Chp 34 pass语句
# 在还没有写代码的地方用作占位符

# Chp 35 range()函数的使用
# 用于生成一个整数序列
# 三种创建方式
# r=range(10)#默认从0开始，相差1为步长
# # 返回值是一个迭代器对象
# print(list(r))
# # 用于查看range对象当中的整数序列
# r=range(1,10)#指定了起始值和终止值，从1开始到10结束（不包含10）
# print(list(r))
# r=range(1,10,2)#指定了起始值，终止值和步长，相差为2
# print(list(r))
# # 判断指定的整数在序列中是否存在用 in和not in
# print(9 in r)
# 优点：不论想产生大的整数序列，只用最多三个值表示，且占用内存相等
# 只有当用到range对象时，才会去计算range中的元素

# Chp 36 while循环
# 语法结构
# while pass:
    # pass
# while判断n+1次，条件为真执行n次

# Chp 37 练习加和1到100以内的所有偶数
# 略
# 一种使用range的方法
# print(sum(range(1,100,2)))

# Chp 38 for-in循环
# in表达从字符串，序列中依次取值，又称为遍历
# 遍历的对象必须是可迭代对象
# 语法结构
# for 自定义变量 in 可迭代对象：
#     pass
# for item in 'Python':#将字符从字符串中依次取出
#     print(item)
# for i in range(10):
#     print(i)
# #如果在循环体中不需要用到自定义变量，则可将自定义变量定义为_
# for _ in range(5):
#     print('人生苦短，我用Python')
# sum=0
# for item in range(1,101):
#     if item%2==0:
#         sum+=item
# print('偶数和为：',sum)

# Chp 39 练习求100到999之间的水仙花数
# for i in range(101,1000):
#     if (i%10)**3+((i//10)%10)**3+(i//100)**3==i:
#         print(i)
# 第二种实现方法
# for a in range(1,10):
#     for b in range(0,10):
#         for c in range(0,10):
#             if a**3+b**3+c**3==int(str(a)+str(b)+str(c)):
#                 print(a**3+b**3+c**3)

# Chp 40 流程控制语句break
# 用于结束循环结构，通常与分支结构if一起使用(while也可以)
# 代码略

# Chp 41 流程控制语句continue
# 用于结束当前循环，进入下一次循环
# 代码略

# Chp 42 else语句
# 和while，for搭配时：
# 没有遇到break的时候正常在循环结束后执行，一旦break跳出则不执行
# for _ in range(3):
#     pwd=input('请输入密码')
#     if pwd == '8888':
#         break
#     else:
#         print('密码不正确')
# else:
#     print('对不起，三次密码均输入错误')
    # 换成while同理

# Chp 43 嵌套循环
# 代码略

# Chp 44 二重循环中的break和continue
# break和continue只用于控制本层循环，对外层无影响

# Chp 45 为什么需要列表
# 列表相当于其他语言中的数组,但是可以存储不同类型的元素
# 存储n个数据方便程序对这些数据进行整体操作
# lst=['hello','world',98]
# print(id(lst))
# print(type(lst))
# print(lst)

# Chp 46 列表对象的创建
# 使用[]，元素之间使用逗号分隔
# lst=['hello','world']
# # 使用内置函数list()
# lst2=list(['hello','world'])
# print(lst,lst2)

# Chp 47 列表的特点
# 列表元素按顺序有序排序
# 索引映射唯一一个数据
# 可以重复储存数据
# 任意数据类型混存
# 可以根据需要动态分配和回收内存

# Chp 48 获取指定元素的索引
# 通过index()方法获取
# lst=['hello','world',98,'hello']
# print(lst.index('hello'))
# # 当列表中含有多个被索引元素时，只返回第一个索引编号
# print(lst.index('python'))
# 不存在时会报错
# print(lst.index('hello',1,4))
# 可以指定头和尾索引号进行查找

# Chp 49 获取列表中指定元素
# 使用指定索引，正向为正，逆向为负
# lst=['hello','world',98,'hello']
# print(lst[2])
# print(lst[-3])

# Chp 50 获取列表中的多个元素
# 使用切片操作
# [start:stop:step]
# 切片的结果是原列表的拷贝
# lst=['hello','world',98,10,20,30,40]
# print(id(lst[1:6:1]))
# print(lst[1:6:1])
# print(lst[1:6:2])
# print(id(lst))
# 当步长为负数是，切片的第一个元素默认为列表的第一个元素
# print(lst[::-1])

# Chp 51 列表元素的判断和遍历
# 使用in 和not in
# lst=[10,20,'python','hello']
# print(10 in lst)
# print(100 in lst)
# 使用for in 循环遍历列表
# for item in lst:
#     print(item)

# Chp 52 列表元素的增加操作
# 使用方法append()在列表的末尾添加一个元素
# lst=[10,20,'python','hello']
# lst.append(100)
# print(lst)
# 并且标识相同，即是同一个列表的更改
#  使用方法extend()在列表末尾添加至少一个元素
# lst2=[10,20]
# lst.append(lst2)
# print(lst)
# lst.extend(lst2)
# print(lst)
# 使用insert()在列表当中插入元素
# lst.insert(1,90)
# print(lst)
# 使用切片在列表任意位置上添加任意个元素
# lst[1:]=lst2
# print(lst)
# 从指定的位置开始，到指定的位置结束切除原本元素并添加新元素

# Chp 53 列表元素的删除操作
# 使用remove()方法删除一个指定的元素，元素重复时只删除第一个,不存在会报错
# lst=[10,20,30,41,50,30]
# lst.remove(30)
# print(lst)
# 使用方法pop()删除一个指定索引位置上的元素，不指定则删除最后一个元素，索引不存在会报错
# lst.pop(2)
# print(lst)
# 使用切片一次可以删除指定位置的多个元素，但是实际上是产生一个新列表
# newlist=lst[1:3]
# 使用空列表可以避免产生一个新列表
# lst[1:3]=[]
# 使用方法clear()可以清空一个列表
# lst.clear()
# 使用语句del可以删除一个列表
# del lst

# Chp 54 列表元素的修改操作
# 一次修改一个值
# lst=[10,20,30,40,50,60]
# lst[2]=100
# print(lst)
# # 为指定的切片赋予一个新值
# lst[1:3]=[200300,400,300]
# print(lst)

# Chp 55 列表元素的排序操作
# 使用方法sort()，可以将列表中所有元素默认按照从小到大的顺序进行排序，可以指定reverse=True，进行降序排序
# lst=[20,30,40,50,98,2,64,22]
# print(lst,id(lst))
# lst.sort()
# print(lst,id(lst))
# lst.sort(reverse=True)
# print(lst)
# 使用内置函数sorted()，可以指定revers=True，进行降序排序，原列表不发生改变
# print(lst,id(lst))
# newlist=sorted(lst)
# print(newlist)
# newlist2=sorted(lst,reverse=True)
# print(newlist2)

# Chp 56 列表生成式
# 意为生成列表的公式
# 语法格式
# [i*i(自定义变量的函数表达式） for i（自定义变量） in range(a,b)(生成长度)]
# lst=[i for i in range(1,10)]
# print(lst)
# lst2=[i*2 for i in range(1,6)]
# print(lst2)

# Chp 57 什么是字典
# 字典是Python内置的数据结构，是一个可变序列，使用{}定义
# 以键值对的方式存储数据，字典是一个无序的序列
# scores={'zhangsan':100,'lisi':98,'wangwu':45}
# 在往字典中存储数据时，会经过哈希函数计算后得到在字典中的位置hash(key)
# 字符串序列str即为不可变序列,可以作为key

# Chp 58 字典的实现原理
# 字典是根据key查找所对应的value的位置

# Chp 59 字典的创建
# 第一种：scores={'zhangsan':100,'lisi':98,'wangwu':45}
# 第二种：dict(name='jack',age=20)
# scores={'zhangsan':100,'lisi':98,'wangwu':45}
# print(scores)
# print(type(scores))
# 创建空字典
# dic={}

# Chp 60 字典元素的获取
# scores={'zhangsan':100,'lisi':98,'wangwu':45}
# print(scores['zhangsan'],scores['chenliu'])获取不存在的元素会报错
# print(scores.get('zhangsan'),scores.get('chenliu'))获取不存在的元素输出none
# print(scores.get('maqi',99))99是查找到不存在的值时的默认输出值（替换none）

# Chp 61 字典元素的常用操作
# 使用in not in 判断值在字典中存不存在
# scores={'zhangsan':100,'lisi':98,'wangwu':45}
# print('zhangsan' in scores)
# 使用del删除指定的键值对
# del scores['zhangsan']
# 使用clear()方法清空字典中所有的元素
# scores.clear()
# 新增元素
# scores['chenliu']=98
# 修改元素
# scores['chenliu']=100
# print(scores)

# Chp 62 获取字典视图
# 使用key()方法获取字典中所有的的key
# scores={'zhangsan':100,'lisi':98,'wangwu':45}
# keys=scores.keys()
# print(keys)
# print(type(keys))
# 将所有的key所成的视图转换成列表
# print(list(keys))
# 使用value()方法获取字典中所有的值
# values=scores.values()
# print(values)
# print(type(values))
# 同样可以用list()转换为列表
# 使用items()方法获取所有的键值对
# items=scores.items()
# print(items)
# print(type(items))
# 同样可以转换为列表，转换后列表中元素由元组组成

# Chp 63 字典元素的遍历
# scores={'zhangsan':100,'lisi':98,'wangwu':45}
# for item in scores:
#     print(item,scores[item],scores.get(item))

# Chp 64 字典的特点
# key值不允许重复,value可以重复
# d={'name':'zhangsan','nikename':'zhangsan'}
# print(d)
# 字典中的元素是无序的(python 3.6 之后变成有序，尚未学习)
# 字典可以根据需要动态伸缩
# 字典会浪费较多的内存，是一种使用空间换时间的数据结构

# Chp 65 字典生成式
# items=['fruits','books','others']
# prices=[96,78,85]
# print(list(zip(items,prices)))
# 使用内置函数zip()将可迭代的对象最为参数，将对象中对应的元素打包成一个元组，然后返回由这些元组组成的列表
# 再通过字典生成式让这两个列表第一个作为键，第二个作为值生成字典
# d={item:price for item,price in zip(items,prices)}
# d2={item.upper():price for item,price in zip(items,prices)}将item换成大写
# 还有方法lower()全部改小写，captitalize()首字母大写，title()每个单词首字母大写
# print(d)
# print(d2)
# 方法二(弹幕版)
# d=dict(zip(items,prices))
# print(d)

# Chp 66 什么是元组
# 元组是Python内置的数据结构之一，是一个不可变序列
# 可变序列 列表，字典
# 不可变序列 元组，字符串

# Chp 67 元组的创建方式
# t=('python','hello',98)
# 小括号可以省略，只包含一个元素的元组需要使用小括号和逗号
# t=('python',)
# print(t)
# print(type(t))
# 第二种方式
# t2=tuple(('python','hello',98))
# 空元组
# t=()
# t=tuple()

# Chp 68 为什么要把元组设计成不可变序列
# 在多任务环境下，同时操作对象时不需要加锁
# 因此，在程序中尽量使用不可变序列
# 注意：
# 元组当中存储的是对象的引用
# 如果元组当中对象本身是不可变对象，则不能再引用其他对象
# 如果元组中对象是可变对象，则可变对象的引用不允许改变，但是数据可以改变
# 意思是说，元组中每一个索引指向的对象都是固定不可更改的，但是可以对指向的对象进行更改
# t=(10,[20,30],9)
# print(t)
# print(type(t))
# print(t[0],type(t[0]),id(t[0]))
# print(t[1],type(t[1]),id(t[1]))
# print(t[2],type(t[2]),id(t[2]))
# 尝试更改元组
# t[1]=100
# 报错
# 尝试修改列表
# t[1].append(100)
# print(t,id(t[1]))

# Chp 69 元组的遍历
# t=('python','world',98)
# 第一种获取方式，索引
# print(t[1])
# 第二种获取方式，遍历
# for item in t:
#     print(item)

# Chp 70 什么是集合
# python内置的数据结构，与列表，字典一样属于可变序列
# 集合是没有value的字典
# 存储地址也是通过哈希函数计算集合中的元素确定
# 因此，定义类型与字典十分相似，性质也十分相似
# s={'python','hello',98}
# s1={2,3,44,5,5,4,6,2}
# print(s1)
# 集合中的元素也不允许重复
# 第二种创建方式,使用内置函数set()
# s2=set(range(6))
# print(s2)
# s3=set([1,5,6,9,'hello'])
# print(s3,type(s3))
# s4=set((1,5,4,6,954))
# print(s4)
# s5=set('python')
# print(s5)
# s6=set({1,2,55,55,3,6})
# print(s6)
# 创建空集合
# s7=set()
# 如果用{}定义是空字典
# 集合的遍历
# for item in s:
#     print(item)

# Chp 71 集合的相关操作
# 集合元素的判断操作
# 使用in 或者not in
# s={10,20,30,40}
# print(10 in s)
# print(50 in s)
# 集合元素的新增操作
# 使用add()方法为集合中新增一个元素
# s.add(80)
# print(s)
# 使用update()方法添加至少一个元素，括号内列表，元组，集合都可以
# s.update([200,300,400])
# print(s)
# 集合元素的删除操作
# 使用remove()方法一次可以删除一个元素，指定元素不存在时抛出异常
# s.remove(10)
# print(s)
# 使用discard()方法，一次删除一个指定元素，不存在时不抛出异常
# s.discard(200)
# print(s)
# 使用pop()方法，一次删除一个任意元素(随机)(据说删除元素是从栈顶开始删，即内存位置从小往大，与哈希算出来的内存位置有关)
# s.pop()
# print(s)
# 使用clear()方法，清空集合
# s.clear()
# print(s)

# Chp 72 集合间的关系
# 两个集合是否相等可以使用==与!=判断
# s1={10,20,30,40}
# s2={30,40,20,10}
# print(s1==s2)
# 一个集合是否是另一个集合的子集，可以用方法issubset()判断
# s1={10,20,30,40,50,60}
# s2={10,20,30}
# s3={10,20,70}
# print(s2.issubset(s1))
# print(s3.issubset(s1))
# 一个集合是否是一个集合的超集，可以用方法issuperset()判断
# print(s1.issuperset(s2))
# 两个集合是否没有交集，可以用方法isdisjoint()判断,False就是有交集
# print(s2.isdisjoint(s3))

# Chp 73 集合的数学操作
# 两个集合的交集
# 交集
# s1={10,20,30,40}
# s2={20,30,40,50,60}
# print(s1.intersection(s2))
# print(s1 & s2)
# 并集
# print(s1.union(s2))
# print(s1 | s2)
# 差集
# print(s1.difference(s2))
# print(s1-s2)
# 对称差集
# print(s1.symmetric_difference(s2))
# print(s1 ^ s2)

# Chp 74 集合生成式
# 将列表生成式中的[]改为{}即可
# s={i for i in range(0,6)}
# print(s)

# Chp 75 字符串的创建与驻留机制
# 字符串是Python当中的一种基本数据类型，是一个不可变的字符序列
# 字符串驻留机制是指，python中对于相同字符串仅保留一份的方法
# 当一个字符串被创建之后，再创建相同字符串时，python会将原本字符串的地址赋给新的变量，即后续变量的指针指向的是同一个地址(用C的方法解释)
# a='python'
# b="python"
# c='''python'''
# print(id(a),id(b),id(c))
# 字符串驻留机制的几种模式(交互模式)(windows cmd或者python自带的idle)
# 字符串的长度为0或者1时
# 符合标识符的字符串(仅含有字母数字下划线的字符串)
# 字符串只在编译时驻留，而非运行时
# a='abc'
# b='a'+'bc'
# c=''.join(['a','bc'])
# print(a is b)
# print(a is c)
# 因为a和b是在代码编译的时候就确定了为'abc'，而c是要运行程序后使用方法join()才会赋值为'abc'
# 所以a,b会有驻留机制，c没有
# [-5,256]之间的整数数字
# 可以import sys，使用sys.intern()方法强制驻留(交互模式下)
# import sys
# a='abc%'
# b='abc%'
# print(a is b)
# a=sys.intern(b)
# print(a is b)
# pycharm对于字符串进行了优化处理，都会驻留
# 字符串驻留机制的优缺点
# 当需要值相同的字符串时，可以直接从字符串池中拿来使用，避免频繁地创建和销毁，提升效率和节约内存
# 在进行字符串拼接的时候建议使用join方法，因为join方法是先计算出所有字符的长度，然后再创建一次对象，效率要比+更高

# Chp 76 字符串的查询操作
# 字符串查询操作的方法
# index()查找子串第一次出现的位置，如果不存在则抛出错误
# rindex()查找子串最后一次出现的位置，如果查找的子串不存在时抛出错误
# find()查找子串第一次出现的位置，不存在则返回-1
# rfind()查找子串最后一次出现的位置，不存在则返回-1
# s='hello,hello'
# print(s.index('lo'))
# print(s.find('lo'))
# print(s.rindex('lo'))
# print(s.rfind('lo'))
# print(s.find('k'))

# Chp 77 字符串的大小写转换操作
# upper()方法所有字符转换为大写
# lower()全部改小写
# captitalize()第一个字符大写其他转为小写
# title()每个单词首字符大写其他小写
# swapcase()把所有小写转大，大写转小
# s='hello,python'
# a=s.upper()
# print(a,id(a))
# print(s,id(s))
# a2=s.lower()
# a3=s.capitalize()
# a4=s.swapcase()
# a5=s.title()
